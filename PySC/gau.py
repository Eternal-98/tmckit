#!/usr/bin/env python
from math import *
from chem_utils import *
from io_utils import *


def f_gau_write_gjf(name,mol,title=None):
  """
  This subroutine write molecular structure into name.gjf in the Gaussian input format
  """
  print "Write molecular struct into Gaussian input file format: "+name+".gjf"
  nat = len(mol)
  ofile = open(name+".gjf",'w')
  ofile.write("%%chk=%s\n"%(name))
  ofile.write("#p B3LYP/6-31G* \n\n")

  if title is None:  title = "Gaussian input file generated by f_Write_Struct_gjf"
  ofile.write("%s\n\n"%(title))

  ofile.write("0  1\n")
  for iat in range(nat):
    atom = mol[iat][0]
    xyz = mol[iat][1][:]
    ofile.write("%-6s %12.6f %12.6f %12.6f\n"%(atom,xyz[0],xyz[1],xyz[2]))
  ofile.write("\n") 
  ofile.close()

def f_gau_read_gjf(name):
  """
  This subroutine reads the molecular structure from the gjf file
  """
  ifile = open(name+".gjf",'r')
  mol = []
  head = False
  isec = 0
  while (1) :
    line = ifile.readline().strip()
    if line == '': line = ' '
    if line[0] == '!':  # comments lines
      continue
    if line[0] == '%':  # link0 section
      continue
    if line[0] == '#':  # route section
      isec=1
      continue
    if isec == 1 and line[0] != ' ': # additional route section line
      continue

    if isec == 1 and line[0] == ' ' : # the end of the route section
      isec = 2
      continue

    if isec == 2 and line[0] != ' ': # title lines
      continue

    if isec == 2 and line[0] ==' ': # end of the title section
      isec = 3
      continue
    if isec == 3 and line[0] != 0 : # the charge and multiplicity line
      isec = 4
      continue

    if isec == 4 and line[0] != ' ':
      data = line.split()
      n = len(data)
      if n < 4:
        print "ERROR: unsupported molecular specification: ", line
        sys.exit(1)

      atom = data[0]
      x = float(data[n-3])
      y = float(data[n-2])
      z = float(data[n-1])
      mol.append([atom,[x,y,z]])
      continue
    if isec == 4 and line[0] == ' ':  # end of molecular specification section
      break

  ifile.close()
  return mol

def f_gau_read_out(name,n=-1,debug=True):
  """
  This subroutine reads the structure from the output of the g09 standard output.
  In default, only the last optimized structure is read.
  """
  # first get the total number of structures available in the output file
  starting_tag1 = "Input orientation:"
  starting_tag2 = "Standard orientation:"
  optimized_tag = "Optimization completed"

  ifile = open(name, 'r')
  struct_all = []
  n_struct = 0

  lreach_optimized = False
  while (1):
    line = ifile.readline()
    if not line: break       # reach the end of file

    if optimized_tag in line:
      lreach_optimized = True

    if ( starting_tag1 in line or starting_tag2 in line ) and lreach_optimized : # start to read the structure
      f_Skip_Lines(ifile,4)
      mol=[]
      while (1):
        line = ifile.readline()
        if "---" in line: break
        data = line.split()
        atom = f_Element_Z_to_Symbol( int(data[1]) )
        x = float(data[3])
        y = float(data[4])
        z = float(data[5])
        mol.append([atom,[x,y,z]])

      lreach_optimized = False
      struct_all.append(mol)
      n_struct += 1

  if n_struct== 0 :
    print "ERROR: No structure is found in " +name
    sys.exit(1)

  if debug:
    print n_struct," optimized structures are found"

  if n==0:
    return struct_all
  else:
    return struct_all[n]

