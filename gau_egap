#!/usr/bin/env python
import sys,os
from io_utils import *
from struct_utils import *
from gau_utils    import *
from constants import *

def f_Help_Info():
  myname = sys.argv[0]
  print "\n"+myname + ": Calculate the energy gap by \delta SCF method \n"
  print "   Usage: " + os.path.basename(myname) + " [options]"\
  + """
  Options:  
    --debug            # set debug mode
    -h                 # display this help information 
    -b   <basis>       # can be standard basis name or a text file containing the defition of the basis 
    -cm  <ch_mult> # charges and multiplicities for N, N-1 and N+1, given as a string 
    -i  <inp>          # the file for the structure , its format is indicated by this suffix(=xyz/gjf/mol) 
    -f  <file >        # the prefix name for files generated by this script   

    -m  <method>       # which method used for the calculations 

    -np <nproc>        # set the directive for parallelization 
    -op <op_scf  >      # additional SCF option        

    -ps                # use ECP 
    -s <g09_out>      # just summarize the result 
"""
  sys.exit(0)

def f_summarize(g09_out):
  print "\n---------------- Summary ----------------\n"
  etot = f_Gau_read_energy(g09_out)
  if len(etot) < 3:
    print "ERROR: incomplete results are found in the output"+g09_out
    sys.exit(1)

  ofile = open(g09_out,'a') 
  
  E0N   = etot[-3]
  E0Nm1 = etot[-2]
  E0Np1 = etot[-1]

  IP = (E0Nm1 - E0N )*Ry2eV*2
  EA = (E0N - E0Np1 )*Ry2eV*2 
  Eg = IP - EA

  ofile.write("\n\n*** Summary of gau_egap calculation ***\n")
  ofile.write("%16s %16s %16s %8s %8s %8s\n"%("E0(N)/Ha","E0(N-1)/Ha","E0(N+1)/Ha","IP/eV","EA/eV","Eg/eV"))
  ofile.write("%16.6f %16.6f %16.6f %8.3f %8.3f %8.3f\n"%(E0N,E0Nm1,E0Np1,IP,EA,Eg))
  ofile.close() 


def_method = "B3LYP"
def_task = 1 
def_file = ''
def_debug = True
def_opt = "Int=UltraFine "
def_nproc = 4
def_inp = ''
def_basis = '6-31G*'
def_pseudo= False 


if f_Getopt('-h',0,False): f_Help_Info()

sum_out= f_Getopt('-s',1,None) 
if sum_out:
  f_summarize(sum_out) 
  sys.exit(0)

debug    = f_Getopt('-D',   0, def_debug) 
ch_mult  = f_Getopt('-cm',   1, '') 
file     = f_Getopt('-f'     , 1, def_file)
inp      = f_Getopt('-i'     , 1, def_inp) 
basis    = f_Getopt('-b'     , 1, def_basis) 
method   = f_Getopt('-m'     , 1, def_method) 
nproc    = f_Getopt('-np'    , 1, def_nproc) 
op_scf  = f_Getopt('-op'    , 1, def_opt ) 
pseudo   = f_Getopt('-ps'    , 0, def_pseudo) 
task     = f_Getopt('-t'     , 1, def_task) 

if pseudo:
  ps_flag = ' Pseudo=Read '
else:
  ps_flag = ''

# some security check with the input 

# get the initial structure
inp_sfix = os.path.splitext(inp)[-1][1:]
inp_pfix = os.path.splitext(inp)[0]
if file == '': file = inp_pfix+"-eg" 

g09_inp = file+".gjf"
g09_out = file+".log" 
g09_err = file+".err" 
g09_chk = file+".chk"
if ch_mult == '':
  ch_mult = ["0 1", "1 2", "-1 2"]
else:
  lt = ch_mult.split()
  ch_mult = [ lt[0]+' '+lt[1], lt[2]+' '+lt[3], lt[4]+' '+lt[5] ]

print "\n*** Job Information ***"
print " initial structure from:   " + inp 
print " SCF options:              " + op_scf 
print " method/basis:             " + method + "/"+basis
print " input file:               " + g09_inp
print " output file:              " + g09_out 
print " checkpoint file:          " + g09_chk 
print " Charge and mult. for N:   "+ch_mult[0]
print " Charge and mult. for N-1: "+ch_mult[1]
print " Charge and mult. for N+1: "+ch_mult[2]

# check basis 
basis_file=None 
if os.path.isfile(basis): 
  basis_file = basis 
  basis = 'gen'

# prepare the input files 

# get the initial structure 
print "\n*** Obtain initial structure ***" 
if inp_sfix == 'gjf': 
  mol = f_Gau_read_struct_gjf(inp_pfix)
elif inp_sfix == 'xyz':
  mol = f_Read_Struct_xyz(inp_pfix,debug=debug)
elif inp_sfix == 'mol':
  mol = f_Read_Struct_mol(inp_pfix,debug=debug)
elif inp_sfix == 'log' or inp_sfix == 'out':
    mol = f_Gau_Read_Struct(inp, debug=debug)
else:
  print "error: unsupported format in the input file " + inp 
  sys.exit(1)

print "\n*** Create the batch input file ***"
ofile = open(g09_inp,'w') 

ofile.write("%chk="+g09_chk+"\n")
job_setup = "#p " + method + '/' + basis + " " + op_scf + ps_flag

if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
ofile.write(job_setup + " test \n\n")
ofile.write("calculate E0(N) \n\n")
ofile.write(ch_mult[0]+"\n")
for ia in range(len(mol)):
  atom = mol[ia][0]
  xyz = mol[ia][1]
  ofile.write("%-6s %12.6f %12.6f %12.6f\n"%(atom,xyz[0],xyz[1],xyz[2]))
ofile.write("\n") 
if basis_file:  ofile.write("@"+basis_file+"\n")

ofile.write("\n--Link1--\n")
ofile.write("%chk="+g09_chk+"\n")
if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
ofile.write(job_setup + " geom=checkpoint test \n\n")
ofile.write("calculate E0(N-1) \n\n")
ofile.write(ch_mult[1]+"\n")
ofile.write("\n") 
if basis_file: ofile.write("@"+basis_file+"\n\n")

ofile.write("\n--Link1--\n")
ofile.write("%chk="+g09_chk+"\n")
if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
ofile.write(job_setup + " geom=checkpoint test \n\n")
ofile.write("calculate E0(N+1) \n\n")
ofile.write(ch_mult[2]+"\n")
ofile.write("\n")
if basis_file: ofile.write("@"+basis_file+"\n\n")

ofile.close()

# run the gaussian job 
print "\n*** Run the calculation ***"
f_Gau_run_g09(g09_inp,g09_out,g09_err)

# summarize the output 
print "\n*** Summarize the results ***"
f_summarize(g09_out) 

