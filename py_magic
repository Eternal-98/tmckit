#!/usr/bin/env python

import sys,os,os.path,shutil
from struct_utils import *
from io_utils import *
from list_utils import *
from random import * 

# default input and output format 

myname_full = sys.argv[0]
myname = os.path.basename(myname_full)

def f_Help_Info():
  print "\n"+myname_full + ": a Python script to magic number clusters \n"
  print "   Usage: " + os.path.basename(myname) + " [options]"\
  + """
  Options:  
    -a <atoms >      # composition information  
                       mode == 0   : "atom"
                       mode == 1/2 : "atom1" "atom2" ratio_atom1
                       mode == 3   : "atom1" "atom2" ratio_atom1
    -d <dist >       # closest inter-atom distance
    --debug          # set debug mode
    -f <file >       # prefix for output
    -m <mode >       # the mode for nano-particles 
                     #  0 -- pure np 
                     #  1 -- alloyed nano-particles of two atoms
                     #  2 -- the outermost layer is alloyed by the second atom 
                     #  3 -- core-shell nano-particles     
    -n <nord >       # order of the cluster i.e. the number of atoms on each edge  
    -o <ofmt>        # output format, default: xyz
    -t <type >       # what type of magic number cluster (fcc/hcp/tet)
  """
  sys.exit(0)

def_file = 'magic'
def_type = 'fcc'
def_nord = 1
def_dist = 2.5
def_atom = "Au"
def_ofmt = 'xyz'
def_debug = True 
def_mode = 0 

if f_Getopt('-h',0,False): f_Help_Info()
file = f_Getopt('-f',1,def_file) 
type = f_Getopt('-t',1,def_type) 
nord = f_Getopt('-n',1,def_nord) 
mode = f_Getopt('-m',1,def_mode) 

if mode == 0:  # pure nano-particles
  atom = f_Getopt('-a',1,def_atom)
  atoms = [atom,'X',1.0]
elif mode == 1 or mode == 2 : # bimetallic alloyed nanoparticles
  atoms = f_Getopt('-a',3,[def_atom,'X',1.0])
elif mode == 3: # core-shell nanoparticles  
  atoms = f_Getopt('-a',3,[def_atom,'X',nord])

dist = f_Getopt('-d',1,def_dist)  
ofmt = f_Getopt('-o',1,def_ofmt)
debug = f_Getopt('--debug',0,def_debug)

if type == 'hcp' or type == 'fcc': 
  mol = [[atoms[0],[0.0,0.0,0.0]]]
  xyz = [[0.0,0.0,0.0]]
  for iod in range(nord-1):
    nseed = len(mol)
    for isd in range(nseed):
      rseed = xyz[isd]
      xyznew = f_NN_Generator(rseed,atoms[0],dist,type)
      natom = len(xyz)
      for ia_new in range(len(xyznew)): 
        r_new=xyznew[ia_new][:]
        if f_List_Included(r_new,xyz[0:natom],dist*0.9) < 0 : 
          xyz.append(r_new)
          atom = atoms[0]
          if mode == 1: # alloyed nano-particles
            if random() > atoms[2]: atom = atoms[1] 
          elif mode == 2: # surface-alloyed nano-particles 
            if iod == nord-2 and random() > atoms[2]: atom = atoms[1]
          elif mode == 3 : # a core-shell nano-particles 
            if iod > atoms[2]-2: atom = atoms[1] 
          mol.append([atom,r_new]) 

elif type == "tet":
  acub = sqrt(2.0)*dist
  mol = f_Cluster_Tetra(atom,acub,nord)

else: 
  print "ERROR in " + myname + ": unsupported type="+type 

print "Total number of atoms in the cluster:%d"%(len(mol))

chemform= f_Check_Formula(mol)  

title="nano cluster %s generated by %s: type=%s, nord=%d" %(chemform,myname,type,nord)
if   ofmt == 'xyz':    f_Write_Struct_xyz(file,mol,title)
elif ofmt == 'gjf':    f_Write_Struct_gjf(file,mol,title)
elif ofmt == 'siesta': f_Write_Struct_siesta(file,mol) 
elif ofmt == 'aims':   f_Write_Struct_aims(file,mol)
else: 
  print "WARNING: unsupported output format: %s"%(ofmt)
  print " -- the defaul xyz format is used"
  f_Write_Struct_xyz(file,mol,title)

