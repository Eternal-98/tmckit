#!/usr/bin/env python
import sys,os,shutil,os.path
from struct_utils  import *
from constants     import *
from vasp_utils_jh import * 
from io_utils      import *
from data_utils    import * 
from band_utils    import * 

def f_Help_Info():
  myname = sys.argv[0]
  print "\n"+myname + ": a Python script to set the KPOINTS file \n"
  print "   Usage: " + os.path.basename(myname) + " [options]"\
  + """
  Options:
    -h                   # display this help information
    -l  <len_k>          # the length 
    -m  <mode=M>         # the generation mode: M/G/A/C
                            M - Monkhorst-Pack 
                            G - Gamma centered 
                            A - Automatic 
                            C - customized (not implemented) 
    -nk <nk1[:nk2:nk3]>  # the number of k-points 
  """
  sys.exit(0)

# default input and output format 

if f_Getopt('-h',0,False): f_Help_Info()

nk_str  = f_Getopt('-nk',1,'' )
mode    = f_Getopt('-m',1,'M' ) 
len_k   = f_Getopt('-l',1,0.0) 


if mode == 'G' or mode == 'M':
  # get the number of k-points 
  tmp = nk_str.split(":") 
  print tmp
  nk=[]
  for i in range( len(tmp) ):
    nk.append(int(tmp[i]))

  if len(nk) == 1:
    nk.append(nk[0])
    nk.append(nk[0])

if len_k > 0.0:
  mode = 'A'

kp_file="KPOINTS"

if os.path.isfile( kp_file ):
  print "Copy the existing KPOINTS to " + kp_file + "_old"
  os.rename(kp_file, kp_file+"_old") 

ofile = open(kp_file, 'w') 

ofile.write("k-mesh generated by pv_setkmesh\n")
ofile.write(   "0         # number of k-points = 0 -> automatic generation scheme \n")
if mode == 'A':
  ofile.write( "Auto      # fully automatic \n")
  ofile.write("%6.2f      # length(l)\n"%(len_k))

elif mode == 'G':
  ofile.write( "Gamma   # generate Gamma cetered grid\n")
  ofile.write("%4d %4d %4d\n"%(nk[0],nk[1],nk[2]))
  ofile.write(" 0.0  0.0  0.0\n")

elif mode == 'M':
  ofile.write( "Monkhorst-Pack   # generate M-P\n")
  ofile.write("%4d %4d %4d\n"%(nk[0],nk[1],nk[2]))
  ofile.write(" 0.0  0.0  0.0\n")

ofile.close()
  


  


