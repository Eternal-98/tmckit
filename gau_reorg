#!/usr/bin/env python
import sys 
from io_utils import *
from struct_utils import *
from gau_utils    import *
from constants import *

def f_Help_Info():
  myname = sys.argv[0]
  print "\n"+myname + ": a Python script to facilitate the calculation of internal reorganization energy \n"
  print "   Usage: " + os.path.basename(myname) + " [options]"\
  + """
  Options:  
    --debug            # set debug mode
    -h                 # display this help information 
    -i <inp>           # for task==0, the <inp> file contains the initial structure 
                        its format is indicated by this suffix, currently it supports xyz, gjf, or mol 
                       # otherwise, it contains the gaussian output from a reorg calculation 
    -f <file >         # the prefix name for files generated by this script   
    -o <opt >          # option for the optimization, put in the parentheses      
    -m <method>        # which method (including basis set) used for the calculations 
    -np <nproc>        # set the directive for parallelization 
    -st <task>         # what to start  
                       #  0 -- start from the beginning  
                       #  1 -- create the input file and run the calculation
                       #  2 -- only summarize the results 
"""
  sys.exit(0)

def_method = "B3LYP/6-31G**"
def_task = 1 
def_file = ''
def_debug = True
def_opt = "(Tight,MaxCycles=2000) Int=UltraFine "
def_nproc = 4
def_inp = ''

def_po_method = 'none'


if f_Getopt('-h',0,False): f_Help_Info()

debug  = f_Getopt('--debug', 0, def_debug) 
inp    = f_Getopt('-i'     , 1, def_inp) 
file   = f_Getopt('-f'     , 1, def_file)
method = f_Getopt('-m'     , 1, def_method) 
nproc  = f_Getopt('-np'    , 1, def_nproc) 
opt    = f_Getopt('-o'     , 1, def_opt) 
po_method = f_Getopt('-po' , 1, def_po_method)
task   = f_Getopt('-t'     , 1, def_task) 


# some security check with the input 
if inp == '' and file == '':
  print "ERROR: either '-i <inp>' or '-f <file>' has to be present"
  sys.exit(1)  

if task <= 0 and inp == '':
  print "ERROR: for task=0/1, '-i <inp>' is necessary"
  sys.exit(1) 

if inp != '':
  # get the initial structure
  inp_sfix = os.path.splitext(inp)[-1][1:]
  inp_pfix = os.path.splitext(inp)[0]
  if file == '': file = inp_pfix 
    
g09_inp = file+".gjf"
g09_out = file+".log" 
g09_chk = file+".chk"

# prepare the input files 

if task <= 1:
  # get the initial structure 
  if inp_sfix == 'gjf': 
    mol = f_Gau_read_struct_gjf(inp_pfix)
  elif inp_sfix == 'xyz':
    mol = f_Read_Struct_xyz(inp_pfix,debug=debug)
  elif inp_sfix == 'mol':
    mol = f_Read_Struct_mol(inp_pfix,debug=debug)
  else:
    print "error: unsupported format in the input file " + inp 
    sys.exit(1)

  ofile = open(g09_inp,'w') 

  # write the first part of the batch job file 

  ofile.write("%chk="+g09_chk+"\n")
  if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
  ofile.write("#p " + method + " OPT" + opt + " test \n\n")
  ofile.write("optimization in the neutral state\n\n")
  ofile.write("0 1\n")
  for ia in range(len(mol)):
    atom = mol[ia][0]
    xyz = mol[ia][1]
    ofile.write("%-6s %12.6f %12.6f %12.6f\n"%(atom,xyz[0],xyz[1],xyz[2]))

  ofile.write("\n--Link1--\n")
  ofile.write("%chk="+g09_chk+"\n")
  if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
  ofile.write("#p U" + method + " geom=checkpoint test \n\n")
  ofile.write("single point calculation of the charged state using the optimized neutral-state structure \n\n")
  ofile.write("1 2\n")

  ofile.write("\n--Link1--\n")
  ofile.write("%chk="+g09_chk+"\n")
  if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
  ofile.write("#p U" + method + " OPT" + opt +" geom=checkpoint test \n\n")
  ofile.write("Structrual optimization of the charged state \n\n")
  ofile.write("1 2\n")

  ofile.write("\n--Link1--\n")
  ofile.write("%chk="+g09_chk+"\n")
  if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
  ofile.write("#p "+method+" geom=checkpoint test \n\n")
  ofile.write("single-point calculation of the neutral state using the optimized charged-state structure \n\n")
  ofile.write("0 1\n\n")

  ofile.close()
  if task == 0: sys.exit(0) 

# run the gaussian job 

if task == 1: 
  f_Gau_run_g09(g09_inp,g09_out)

print "\n---------------- Summary ----------------\n"
etot = f_Gau_read_energy(g09_out) 
if len(etot) < 4: 
  print "ERROR: incomplete results are found in the output"+g09_out
  sys.exit(1) 

E0   = etot[-4]
Eps  = etot[-3]
Ep   = etot[-2]
E0s  = etot[-1]
  
lam0 = (E0s - E0)*Ha2eV
lamp = (Eps-Ep)*Ha2eV
lam=  lam0+lamp
Ia = (Ep - E0)*Ry2eV*2
I0 = (Eps - E0)*Ry2eV*2
Ip = (Ep - E0s)*Ry2eV*2
print "#%-20s %14s %14s %14s %14s %6s %6s %6s %6s %6s %6s"%("system","E_0   ","E_+*  ",\
      "E_+  ","E_0*  ","lam0  ","lam+  ","lam  ","I_a  ","I_0  ","I_p  ")  
print "%-20s %14.6f %14.6f %14.6f %14.6f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f"%(file,E0, Eps, \
       Ep, E0s, lam0, lamp, lam, Ia, I0, Ip)

print "\noptimized molecular structures in neutral and charged states are written "
print "  neutral: "+file+"_opt0.gjf"  
print "  charged: "+file+"_opt+.gjf" 
 
mol = f_Gau_Read_Struct(g09_out,0)
if len(mol)<2:
  print "ERROR: Fail to extract structure from the file " + inp
  sys.exit(1)

f_Write_Struct_gjf(file+"_opt0",mol[-2])
f_Write_Struct_gjf(file+"_opt+",mol[-1])

