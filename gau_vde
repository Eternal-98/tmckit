#!/usr/bin/env python
import sys,os
from io_utils import *
from struct_utils import *
from gau_utils    import *
from constants import *

def f_Help_Info():
  myname = sys.argv[0]
  print "\n"+myname + ": Calculate vertical detachment energy (VDE) or vertical attachment energy (VAE)\n"
  print "   Usage: " + os.path.basename(myname) + " [options]"\
  + """
  Options:  
    --debug           # set debug mode
    -h                # display this help information 
    -b   <basis>      # can be standard basis name or a text file containing the defition of the basis 
    -bs  <basis_sp>   # basis for single-point (SP) calculations 
    -i  <inp>         # the file for the initial structure , its format is indicated by this suffix, currently it supports 
                          xyz, gjf, or mol 
    -f  <file >       # the prefix name for files generated by this script   

    -m  <method>      # which method used for the calculations 
    -ms <method_sp>   # method for single point calculation 

    -np <nproc>       # set the directive for parallelization 

    -oo  <op_opt >    # option for optimization 
    -os  <op_sp  >    # option for single-point calculation       

    -ps               # with pseudo-potential 
    -t <task>         # what to do 
                      #  0 -- VDE of a neutral molecule  
                      #  1 -- VDE of a anionic molecule(default) 
                      #  2 -- VAE of a neutral molecule  
    -s <g09_out>      # just summarize the result 
"""
  sys.exit(0)

def f_summarize(g09_out):
  print "\n---------------- Summary ----------------\n"
  etot = f_Gau_read_energy(g09_out)
  if len(etot) < 2:
    print "ERROR: incomplete results are found in the output"+g09_out
    sys.exit(1)

  ofile = open(g09_out,'a') 
  
  E0   = etot[-2]
  E0s  = etot[-1]
  Ip = (E0s - E0)*Ry2eV*2

  print "E0(N)=%12.6f Ha, E0(N-1)=%12.6f Ha, and VDE= %8.3f eV\n"%(E0, E0s, Ip)
  ofile.write("\n\n*** Summary of gau_vde calculation ***\n")
  ofile.write("E0(N)=%12.6f Ha, E0(N-1)=%12.6f Ha, and VDE= %8.3f eV\n"%(E0, E0s, Ip))
  ofile.close() 


def_method = "B3LYP"
def_task = 1 
def_file = ''
def_debug = True
def_op_opt = "(Tight,MaxCycles=2000) Int=UltraFine "
def_op_sp  = " Int=UltraFine "
def_nproc = 4
def_inp = ''
def_basis = '6-31G*'
def_pseudo = True 

def_po_method = 'none'


if f_Getopt('-h',0,False): f_Help_Info()

sum_out= f_Getopt('-s',1,None) 
if sum_out:
  f_summarize(sum_out) 
  sys.exit(0)

debug    = f_Getopt('--debug', 0, def_debug) 
file     = f_Getopt('-f'     , 1, def_file)
inp      = f_Getopt('-i'     , 1, def_inp) 
basis    = f_Getopt('-b'     , 1, def_basis) 
basis_sp = f_Getopt('-bs'    , 1, basis) 
method   = f_Getopt('-m'     , 1, def_method) 
method_sp= f_Getopt('-ms'    , 1, method) 
nproc    = f_Getopt('-np'    , 1, def_nproc) 
op_opt   = f_Getopt('-oo'    , 1, def_op_opt) 
op_sp    = f_Getopt('-os'    , 1, def_op_sp ) 
po_method = f_Getopt('-po' , 1, def_po_method)
pseudo = f_Getopt('-ps'    , 0, def_pseudo) 
task   = f_Getopt('-t'     , 1, def_task) 

if pseudo:
  ps_flag = ' Pseudo=Read '
else:
  ps_flag = ''

# some security check with the input 

# get the initial structure
inp_sfix = os.path.splitext(inp)[-1][1:]
inp_pfix = os.path.splitext(inp)[0]
if file == '': file = inp_pfix 

 

g09_inp = file+".gjf"
g09_out = file+".log" 
g09_err = file+".err" 
g09_chk = file+".chk"

print "\n*** Job Information ***"
print " initial structure from:   " + inp 
print " options for optimization: " + op_opt
print " options for single-point: " + op_sp 
print " method/basis for OPT:     " + method + "/"+basis
print " method/basis for SP:      " + method_sp+"/"+basis_sp 
print " input file:               " + g09_inp
print " output file:              " + g09_out 
print " checkpoint file:          " + g09_chk 

if task == 0:
  charge_mult = ["0 1", "1 2"]
  print " task: VDE (IP) of a neutral molecule"
elif task == 1:
  charge_mult = ["-1 2", "0 1"]
  print " task: VDE (IP) of a anionic molecule"
elif task == 2:
  charge_mult = ["0 1", "-1 2"] 
  print " task: VAE (EA) of a neutral molecule"
else:
  print "ERROR: unsupported option to task=%d",task
  sys.exit(1)  

# check basis 
basis_file=None 
if os.path.isfile(basis): 
  basis_file = basis 
  basis = 'gen'

basis_sp_file = None 
if os.path.isfile(basis_sp):
  basis_sp_file = basis_sp
  basis_sp = 'gen' 

# prepare the input files 


# get the initial structure 
print "\n*** Obtain initial structure ***" 
if inp_sfix == 'gjf': 
  mol = f_Gau_read_struct_gjf(inp_pfix)
elif inp_sfix == 'xyz':
  mol = f_Read_Struct_xyz(inp_pfix,debug=debug)
elif inp_sfix == 'mol':
  mol = f_Read_Struct_mol(inp_pfix,debug=debug)
elif inp_sfix == 'log' or inp_sfix == 'out':
    mol = f_Gau_Read_Struct(inp, debug=debug)
else:
  print "error: unsupported format in the input file " + inp 
  sys.exit(1)


print "\n*** Create the input file ***"
ofile = open(g09_inp,'w') 

ofile.write("%chk="+g09_chk+"\n")
if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
ofile.write("#p " + method + '/'+basis + " OPT" + op_opt + " Freq " + ps_flag + " test \n\n")
ofile.write("optimization in the neutral state\n\n")
ofile.write(charge_mult[0]+"\n")
for ia in range(len(mol)):
  atom = mol[ia][0]
  xyz = mol[ia][1]
  ofile.write("%-6s %12.6f %12.6f %12.6f\n"%(atom,xyz[0],xyz[1],xyz[2]))

ofile.write("\n") 

if basis_file:  ofile.write("@"+basis_file+"\n")

if method_sp != method or basis_sp != basis:
  ofile.write("\n--Link1--\n")
  ofile.write("%chk="+g09_chk+"\n")
  if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
  ofile.write("#p " + method_sp + '/' + basis_sp + op_sp + ps_flag + " geom=checkpoint test \n\n")
  ofile.write("single point calculation using the optimized structure \n\n")
  ofile.write(charge_mult[0]+"\n\n")
  if basis_sp_file: ofile.write("@"+basis_sp_file+"\n")

ofile.write("\n--Link1--\n")
ofile.write("%chk="+g09_chk+"\n")
if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))
ofile.write("#p " + method_sp + '/' + basis_sp + op_sp + ps_flag + " geom=checkpoint test \n\n")
ofile.write("single point calculation of using the optimized neutral-state structure \n\n")
ofile.write(charge_mult[1]+"\n")

ofile.write("\n") 

if basis_sp_file:
  ofile.write("@"+basis_sp_file+"\n\n")

ofile.close()

# run the gaussian job 
print "\n*** Run the calculation ***"
f_Gau_run_g09(g09_inp,g09_out,g09_err)

# summarize the output 
print "\n*** Summarize the results ***"
f_summarize(g09_out) 

