#!/usr/bin/env python
import sys,os,shutil
from subprocess   import *
from io_utils   import *
from w2k_utils    import *
from w2k_optimize import *
import gparams

# This is a wrapper function to perform crystal lattice optimization using Python 

myname = sys.argv[0]
def f_Help_Info_Latt():
  print "\n"+myname + ": a Python script to optimize lattice constants using WIEN2k\n"
  print "   Usage: " + os.path.basename(myname) + " [options]"\
  + """
  Options:  
   -h                      #  print help information only 
   -clmextrpl              #  set to use clmextrapol_lapw to accelerate convergence 
   -debug                  #  set the debug mode, i.e. more detailed information will be written out 
   -ectol <ec_tol=1.e-6>   #  convergence tolence for the total energy             
   -f <case_name=''>       #  case name, default : the name of the current directory
   -fittol <fit_tol >      # the tolerance to accept fitting results in the ScanFit approach 
                             the fitting results are accepted if the the fitting error, 
                             whicch is re-scaled by the difference between maximal and 
                             minimal total energy values in the scanned region, 
                             is smaller than fittol; the default is 0.1
   -fix < ix_fix >         # do constraint optimization with the "i_fix"-th coordinate fixed 
 
   -latt <latt_type>       #  lattice parameters to be optimized, available options: 
                             1-D: "vol", "coa", 'c' 
                             2-D: "vol_coa", "a_c","boa_coa"
                             3-D: "vol_boa_coa", "a_b_c"
                             4-D: "vol_mono", "mono"
                             6-D: "vol_tric", "tric"
                             If not set,  a default value will be determined in terms of the lattice type  
   -m <method=BracketFit>  #  optimization method, available options include 
                             BracketFit  -- for each variable, the minimum is first bracketed 
                                          by the algorithm as given in Numerical Recipe, and then approximatly 
                                          determined by a fitting approach (default: harmonic fitting) 
                             ScanFit     -- a brute-force scan-and-fit approach, maybe not most efficient, but quite robust 
                             TaxiCab     -- optimization by the TaxiCab algorithm, essentially a steepest decent approach 
                                          i.e. optimizing each degree of freedom in turn
                             Powell      -- a home-made Powell algorithm with some additional safe checks 
                             fmin        -- using SciPy.fmin function  
                             fmin_powell -- using SciPy.fmin_powell function
   -minopt <minopt>        # additional option for min_lapw, the default is "-noex"  
   -nmin  <nmax_min=0>     # the number of iteration for to run min_lapw, the default is 0, indicating that 
                             no min_lapw is done
   -out <out_name>         # prefix for output file/directory 
   -i0 <i0 >               # restart from the previous calculations with the index i0 
   -save                   # indicate whether save intermediate wien2k calculations (default)
   -scale <scale=0.5>      # the step size is scaled by this quantity in the case of simultanious 
                           # optimization of lattice and min_lapw
   -start <0/1>            # where to start (valid for nmax_min >0) : 
                             0 -- start from lattice optimization
                             1 -- start from min_lapw 
   -step  <step=2.0>       # this defines the initial step size (in percentage change) for the lattice optimization
   -test                   # stop before running real calcualtion, 
   -useinit                # to indicate to use the existing case_init.struct as the reference 
                           # usually not recommended, but can be used to compare different 
                           # optimization schemes. 
   -w2k <w2k_cmd>          #  wien2k command to be run, e.g. "run_lapw -ec 0.00001" or 
                             or "min_lapw -j 'run_lapw -ec 0.00001' "  
   -xtol <x_tol=0.1>       # tolerance for the percentage change of lattice parameters

 The following options are used to customize the wien2k command, only valid if "-w2k" is not present 
   -scf <w2k_scf>       # which wien2k command (run, runsp, runsp_c, or runfsm ) 
   -orb                 # add "-orb" flag
   -eece                # add "-eece" flag  
   -so                  # add "-so"
   -para                # add "-p" 

  Examples: 

   Interactive use:  
      pw_latt      # optimize lattice constants by the default method 
                 #("run_lapw -ec 0.00001") and optimize lattice constants only
      pw_latt -w2k "runsp_lapw -p -orb -ec 0.000001 -fc 1.0" -out FePO4-latt-min -nmin 10    
      pw_latt -w2k "runsp_lapw -p -orb -ec 0.000001" -save -out FePO4-latt
      pw_latt -w2k "runsp_lapw -p -orb -ec 0.000001" -m fmin_powell -out FePO4-latt

   Use pw_latt with qw2k.sh:
     Unless using the default w2k command, in general, one should put pw_latt 
     and its options into a file, say, opt.sh, with a single line like 
       opt.sh:
         pw_latt -w2k "runsp_lapw -p -orb -ec 0.000001 -fc 1.0" -out FePO4-latt-min -nmin 10
     then make it executable 
         chmod +x opt.sh
     then using qw2k.sh  
        qw2k.sh -p 8 ./opt.sh 

  Since these scripts are still in the experimental stauts, please check the consistency 
  of the final results. When you have done a calculation, you should check 
    1. standard output ( q-*.out when you are using qw2k.sh ): this contains some run-time information 
                        from python scripts 
    2. <out_name>*.dat -- these files (one for each set of internal coordinates) collects the total energy 
                     vs lattice parameters (e.g. vol, c/a)
                     be sure the last line gives the lowest total energy.  
    3. pyw2k.log       -- this file contains all standard output from wien2k, check whether 
                        there are any warnings  
  """
  sys.exit(0)
  # end of f_Help_Info()

if f_Getopt('-h',0,False): f_Help_Info_Latt()

# set up some default variables 
def_case_name  = ''
def_debug= True
def_ec_tol = 1.e-5
def_fit_tol = 0.01
def_force_tol = 2.0
def_i0 = -1
def_latt_type   = ''
def_method = ''
def_min_opt= ''
def_nmax_min = 0
def_out_name = 'latt'
def_save=True
def_scale = 0.5
def_start = 0
def_step = 2.0
def_useinit = False
def_w2k_cmd=''
def_xtol=0.1
def_clmextrpl = False
def_fix = -1 

# get command line options

clmextrpl  = f_Getopt('-clmextrpl',0,def_clmextrpl  )
debug      = f_Getopt('-debug',   0, def_debug      )
case_name  = f_Getopt('-f',       1, def_case_name  )
fit_tol    = f_Getopt('-fittol',  1, def_fit_tol    ) 
fix        = f_Getopt('-fix',     1, def_fix        )
force_tol  = f_Getopt('-ftol',    1, def_force_tol  )
ec_tol     = f_Getopt('-ectol',   1, def_ec_tol     ) 
method     = f_Getopt('-m',       1, def_method     )
min_opt    = f_Getopt('-minopt',  1, def_min_opt    )
nmax_min   = f_Getopt('-nmin',    1, def_nmax_min   )
latt_type  = f_Getopt('-latt',    1, def_latt_type  ) 
i0         = f_Getopt('-i0',      1, def_i0         )
out_name   = f_Getopt('-out',     1, def_out_name   )
w2k_cmd    = f_Getopt('-w2k',     1, def_w2k_cmd    )
xtol       = f_Getopt('-xtol',    1, def_xtol       ) 
save       = f_Getopt('-save',    0, def_save       )
scale      = f_Getopt('-scale',   1, def_scale      )
start      = f_Getopt('-start',   1, def_start      )
step       = f_Getopt('-step',    1, def_step       )
test       = f_Getopt('-test',    0, False          )
useinit    = f_Getopt('-useinit', 0, def_useinit    )

# Get options to customize wien2k command and 
def_w2k_scf = 'run_lapw'
w2k_opt = ' -ec 0.000001 '
case_name = f_Check_Name(case_name)

w2k_scf = f_Getopt('-scf', 1, def_w2k_scf)
if f_Getopt('-orb',  0,False): w2k_opt = w2k_opt + ' -orb '
if f_Getopt('-para', 0,False): w2k_opt = w2k_opt + ' -p '
if f_Getopt('-so',   0,False): w2k_opt = w2k_opt + ' -so '
if f_Getopt('-eece', 0,False): w2k_opt = w2k_opt + ' -eece '

if w2k_cmd =='': w2k_cmd = w2k_scf + w2k_opt

# set whether using clmextrapol_lapw to accelerate convergence 
gparams.use_clmextrapol = clmextrpl 

etot_min = 0.0 
etot =  1.e5

# do a constraint optimization 
constraint = f_New_List(1,6) 
if fix >= 0 : constraint[fix] = 0

# prepare for restarting 
if i0 >= 0: 
  restart = True 
  if i0 == 0: etot = f_Read_Data(out_name.strip()+".dat",'f',-1,-1)
  else: etot = f_Read_Data(out_name.strip()+'-m'+str(i0)+".dat",'f',-1,-1)
  if etot is None:  etot = 1.e5
  print "Restart mode: read the last total energy: %12.6f"%(etot)
  
else:
  restart = False 
  i0 = 0

out_name_0 = out_name 
step_init = step
if nmax_min == 0: start =0  

if test: 
  print "Stop before doing real calculations" 
  sys.exit(0)

for i in range(i0,nmax_min+1):
  step = max(step_init*(scale**i),xtol*2) 

  etot_old = etot

  if i > 0 : out_name = out_name_0 +'-m' + str(i)

  # when the lattice optimization and min are run in turn, 
  # one should use the final structure from min_lapw as the reference structure for the next 
  # cycle of lattice optimization, so why "restart" is falsified here  
  if i > i0: restart = False

  if start == 0 or i > i0 : 
    print "\n============== Optimizing lattice constants =============\n"
    etot = f_Optimize(\
                       type=latt_type,      \
                       case=case_name,      \
                       constraint = constraint, \
                       w2k_cmd=w2k_cmd,     \
                       method=method,       \
                       step = step,       \
                       out_name=out_name, \
                       restart=restart,   \
                       fit_tol = fit_tol,\
                       ftol = ec_tol,\
                       xtol = xtol, \
                       save_all = save, \
                       use_init = useinit,\
                       debug=debug \
                       )
   
  if nmax_min >0 : 

    print "\n========= Optimizing internal coordinates (by min_lapw)  ========\n"
    # check whther w2k_cmd include the option "-fc"
    if not f_Str_Included(w2k_cmd,"-fc"): w2k_cmd = w2k_cmd + " -fc 1.0 "
    
    min_cmd = "min_lapw " + min_opt + " -j '" + w2k_cmd + "'"
    
    failure, output = commands.getstatusoutput( min_cmd )
    if failure:
      print "ERROR when running " + min_cmd
      print " -- write error output in to " + gparams.pyw2k_errout
      ofile = open(gparams.pyw2k_errout,'w')
      ofile.write(output)
      ofile.close()
      sys.exit(1)
    else:
      f_Write_Log(output)

    etot_min = f_Read_Energy(case_name)

    print "Total energy after min_lapw:%20.6f" %(etot_min)
    if save: f_Save_Min(case_name,out_name+"_min")

    print "================= end min_lapw =====================\n"

    if abs(etot_min-etot) < ec_tol: break 
