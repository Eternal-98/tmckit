#!/usr/bin/env python
import sys,os,shutil
from w2k_utils import *
from struct_utils import *
from io_utils import *

def f_Help_Info():
  myname = sys.argv[0]
  print "\n"+myname + ": a Python script to initialize min_lapw calculation \n"
  print "   Usage: " + os.path.basename(myname) + " [options]"\
  + """
  Options: 
    -c  <constr_str>  # the indices of atoms to be constrained as a string of integers 
    -d                # display only  
    -f  <case_name>   # case name 
    -ft <ftol>        # set the tolerance for the force
    -m  <method=MSR1a>      # method of internal minimization(== MSR1a/PORT/NEW1/NEWT
    -s0 <step0>       # initial 'trust-region radius'
    -h                # print out this information 
  """
  sys.exit(0)

def_mode   =  0

if f_Getopt('-h',0,False): f_Help_Info()

constr_str = f_Getopt('-c', 1, '' ) 
display    = f_Getopt('-d', 0, False) 
casename   = f_Getopt('-f', 1, '' )
ftol       = f_Getopt('-ft',1, 0.0)
method     = f_Getopt('-m', 1, 'MSR1a' )
step0      = f_Getopt('-s0',1, 0.0)  

casename = f_Check_Name(casename)

# display the coordinated of all atoms 
(latt_type,latt,basis_eq) = f_Read_Struct_w2k(casename, mode=1) 
nat = len(basis_eq) 

print "Lattice constants:"
print " (a,b,c)=(%12.6f, %12.6f, %12.6f)"%(latt[0],latt[1],latt[2])

print "Atomic coordinates:"
for ia in range(nat):
  info="   Atom %4d %4s"%(ia+1,basis_eq[ia][0])
  neq = len(basis_eq[ia][1])
  for ieq in range(neq):
    xyz=basis_eq[ia][1][ieq]
    info = info+"(%6.4f, %6.4f, %6.4f) "%(xyz[0],xyz[1],xyz[2])
  print info 
print "\n"

if display: sys.exit(0) 

# to avoid misleading information from the original case.scf 
# rename the previous case.scf file
scf_bak= casename+".scf_previous"
scf = casename+".scf"
if os.path.isfile(scf): 
  if os.path.isfile(scf_bak): os.remove(scf_bak)
  os.rename(scf,scf_bak)

file_inM= casename+".inM"
if not os.path.isfile(file_inM) :
  print "run 'x pairhess' to generate initial pairhess"
  W2k_run("x_lapw -f " + casename + "  pairhess") 

# change case.inM to make the constraints 
iat_c = []
nat_c = 0
if constr_str != '': 
  print "constrain atoms:", constr_str
  tl = constr_str.split()
  nat_c = len(tl)
  for ia in range(nat_c):
    iat_c.append(int(tl[ia]))


file_inM_bak= casename+".inM_bak"
if os.path.isfile(file_inM_bak): os.remove(file_inM_bak)
os.rename(file_inM,file_inM_bak)

ifile = open(file_inM_bak,'r') 
ofile = open(file_inM, 'w') 

# first line 
line_s = ifile.readline().split()

if method == '' or method == 'MSR1a': 
  method_inM = line_s[0]
else:
  method_inM = method 
 
if ftol == 0.0:
  ftol = float(line_s[1])
if step0 == 0.0:
  step0 = float(line_s[2]) 

ofile.write("%4s%5.2f%5.2f  # PORT/NEWT;  tolf, Initial Trust Radius\n"%(method_inM,ftol,step0))
  
# first line 
for ia in range(nat): 
  line_in = ifile.readline()
  if ia+1 in iat_c:
    ofile.write("0.0 0.0 0.0 1.0   #Atom    %d Generated by pairhess\n"%(ia+1))
  else:
    ofile.write(line_in) 
ifile.close()
ofile.close() 

if nat_c > 0: 
  W2k_run("x_lapw -f " + casename + "  pairhess") 
  print "re-run 'x pairhess' to impose constraints"

if method == 'MSR1a':
  f_inm = casename + ".inm"
  f_inm_bak= casename+".inm_bak"
  if os.path.isfile(f_inm_bak): os.remove(f_inm_bak)
  os.rename(f_inm,f_inm_bak)

  ifile = open(f_inm_bak,'r')
  ofile = open(f_inm, 'w')
 
  line = ifile.readline()
  line_s = line.split()
  for i in range(len(line_s)):
    if i == 0:   
      ofile.write('%5s '%("MSR1a"))
    else:
      ofile.write('%s '%(line_s[i]))
  ofile.write('\n')
 
  while (1):
    line = ifile.readline()

    if not line : break
    ofile.write(line) 

  ifile.close()
  ofile.close() 
  


