#!/bin/tcsh -f

set fullname=$0
set bindir=$fullname:h
set myname=$fullname:t

set log=:log
set nruns = 1
set sp = 0
set para
set so 
set options = ( -orb -ec 0.000001 -i 200 ) 

unset nlup
unset nldn 
unset file 
unset cmplx 
unset extract 
set mode = 1
set i0=1

alias print 'echo  \!:* | tee -a $outfile '
alias sb 'shift; breaksw'       #definition used in switcha

echo 'get runscf line options'
echo "--"  $*
 
while ($#argv)
  switch ($1)
  case -e:
    set extract;sb 
  case -f:
    shift; set file=$1; set options = ( $options -f $file ) ;  sb
  case -i0: 
    shift; set i0=$1; sb 
  case -m:
    shift; set mode=$1; sb 
  case -n: 
    shift; set nruns=$1; sb
  case -p: 
    set para='-p'; set options = ( $options -p ); sb 
  case -resetdm:
    shift; set options = ( $options -resetdm $1 ); sb
  case -s:
    shift; set sp=$1; sb
  case -so:
    set so='-so'; set options = ( $options -so ); sb 
  case -h: 
    goto help 
  default:
    echo "$name: Illegal options!"
    goto help; sb
  endsw
end


#
# initialize
#
  set wdir=`pwd`
  if ( ! $?file ) then
    set file=$wdir:t
  endif
  echo 'case name' $file
  set outfile = $file.outrdorb 
  echo "Run $myname on " `date` >> $outfile

  if($?extract) goto extract

  # set cmplx 
  print " - check complex"
  set cmplxflag
  w2k_chkcmplx $cmplxflag -f $file
  if( $status == 1 ) then
    set cmplxflag='-c'
    set icmplx=1
  else if( $status == 0 ) then
    set cmplxflag=''
    set icmplx=0
  else
    print "  ERROR found when chkcmplx"
    goto error
  endif
  set options = ( $options $cmplxflag )

  switch ($sp) 
  case 0:
    set runscf = runafm_lapw; breaksw 
  case 1: 
    set runscf = runsp_c_lapw; breaksw
  case 2: 
    set runscf = runsp_lapw; breaksw
  case 3:
    set runscf = runsp_lapw; breaksw
  default:
    print "$name: Illegal options for sp !"
    goto help ; breaksw 
  endsw

  if( $mode == 0 ) then   
    print " run orb calcuation in the normal way "
    $runscf  $options
    goto stop 
  endif 

# prepare input file for initdmat.x
  echo $file > rdmat.inp
  if($sp == 3 ) then 
    echo 0 >>  rdmat.inp
  else 
    echo $sp >>  rdmat.inp
  endif 
  echo 0 >>    rdmat.inp
  set irun = $i0
  while ( $irun < $nruns )
    w2k_clean -f $file 
    rm -f $file.vorb{up,dn}* $file.dmat{up,dn}*
    print 'Generate random initial density matrix'

    dm_init.x < rdmat.inp
    if ( $status != 0 ) then 
      print 'fail to run initdmat.x'
      goto error
    endif  

    $runscf  $options 
    w2k_testerror
    if( $status == 0 && $nruns > 1 ) then   
      w2k_save -f $file -d run-$irun -F
    endif 
    @ irun ++
  end

extract:
  # get the number of atoms
  set natom=`head -2 $file.struct |tail -1 |cut -c28-30`
  set irun = 0
  while ( $irun < $nruns )
     @ irun ++
    if ( -e run-$irun/$file.scf ) then
      cd run-$irun
      set result = ( $irun `sed -n /^:MMINT:/p   $file.scf | tail -n 1 | cut -c43-52` )
      set iat=1
      while ( $iat <= $natom )
        if ( $iat < 10 ) then
          set result = ( $result `sed -n /^:MMI00$iat/p $file.scf | tail -n 1 | cut -c45-54` )
        else
          set result = ( $result `sed -n  /^:MMI0$iat/p $file.scf | tail -n 1 | cut -c45-54` )
        endif
        @ iat ++
      end
      set result = ( $result  `sed -n /^:MMTOT:/p  $file.scf | tail -n 1 | cut -c43-52` )
      set result = ( $result  `sed -n /^:ENE/p  $file.scf | tail -n 1 | cut -c40-59` )
      print  $result  
      cd ..
    endif
  end

stop:
  print "runorb done successfully"
  exit 0

error:
  print "ERROR in $myname"
  exit 1

help:
   cat <<EOF  
 Usage: $myname [options]  <nl for each l at each atom> 
 Options:
    -e                        # extract results 
    -f <file>                 # case name
    -i0 <i0 >                 # initial index for run loop
    -m <mode: 1/0>            # The mode to run orb calculation
                              #  0 -- the normal way 
                              #  1 -- using random initial dmat (default) 
    -n <number of runs>       # Number of runs with different random initial guess
    -resetdm <n>              # add -resetdm <n> to runafm/runsp_lapw 
    -s <0/1/2/3>                # option for spin polarized cases
                              #  0 -- runafm_lapw
                              #  1 -- runsp_c_lapw  
                              #  2 -- runsp_lapw 
                              #  3 -- use runsp but create AFM type dmat 
    -so                       # run calculations with spin-orbit coupling 
    -p                        # parallel  running 
EOF

