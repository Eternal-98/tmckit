#!/usr/bin/env python

import commands,sys,string,math,re, subprocess
from chem_utils import *
from io_utils import * 

def f_Gau_set_hybrid(xc,bas,hfx):
  """
  Set a customized hybrid calculation 
  """
  if xc == 'PBE0':
    iop_str=" IOP(3/76=%05d%05d) IOP(3/77=1000010000) IOP(3/78=1000010000) "%((1.0-hfx)*10000, hfx*10000)
    method = "PBEPBE/" + bas + iop_str
  elif xc == 'B3LYP':
    iop_str = " IOP(3/76=10000%05d) IOP(3/77=07200%05d) IOP(3/78=0810010000) "%(hfx*10000, (1.0-hfx)*10000)
    method = "BLYP/" + bas + iop_str
  elif xc == 'B1LYP':
    iop_str=" IOP(3/76=%05d%05d) IOP(3/77=1000010000) IOP(3/78=1000010000) "%((1.0-hfx)*10000, hfx*10000)
    method = "BLYP/" + bas + iop_str
  elif xc == 'TPSSh':
    iop_str=" IOP(3/76=%05d%05d) IOP(3/77=1000010000) IOP(3/78=1000010000) "%((1.0-hfx)*10000, hfx*10000)
    method = "TPSSTPSS/" + bas + iop_str
  else:
    print "ERROR: unsupported hybrid functional "+xc
    sys.exit(1)

  return method

def f_Gau_run_g09(inp,out=None,err=None):
  """
  Run g09 with given input and output
  """
  ifile = open(inp,'r')
  if out is None:
    ofile = subprocess.PIPE
  else: 
    ofile = open(out,'w')

  if err is None:
    efile = subprocess.PIPE
  else:
    efile = open(err,'w') 

  p=subprocess.Popen("g09",stdin=ifile,stdout=ofile,stderr=efile)
  p.wait()

  ifile.close()
  if not out is None: ofile.close()
  if not err is None: efile.close() 

def f_Gau_read_energy(g09out):
  """
  Read the converged total energy from Gaussian output
  """
  tag_start='Test job not archived.'
  tag_stop = '         '
  
  results = io_read_lines_tagged(g09out,tag_start) 
  n = len(results)
  print "%d set of output are read from %s"%(n,g09out) 
  if n == 0: 
    print "No total energy data found in "+g09out 
    sys.exit(1) 

  patten_hf='.*HF=([0-9.Ee\-+]+)' 
  etot=[]
  for i in range(n):
    lines=results[i]
    
    joined = ''
    for j in range(len(lines)):
      joined = joined + lines[j].strip()

#    print joined 
    match = re.search(patten_hf,joined) 
    if match:
      etot.append(float(match.group(1)))

  return etot 

def f_Gau_read_egap(g09out,spin='up',debug=False):
  """
  Read the HOMO-LUMO gap 
  """

  if spin == 'up':
    tag_occ = 'Alpha  occ.'
    tag_vir = 'Alpha virt.'
  else:
    tag_occ = 'Beta  occ.'
    tag_vir = 'Beta virt.'
  
  ifile = open(g09out,'r')

  egap_all = [] 
  while (1):
    line = ifile.readline()
    if not line: break       # reach the end of file

    started = False     
    if tag_occ in line and started == False:
 
      # read occupied   
      en_occ = []
      while (1):
        if started : 
          line = ifile.readline() 
        else: 
          started = True 

        if tag_occ in line:

          line_sp= line.split()

          if debug: print line_sp
 
          n = len(line_sp) - 4  # the number of energies on this line 
          for i in range(n):
            if len(line_sp[4+i]) >10: 
              en_occ.append(float(line_sp[4+i][0:10]))
              en_occ.append(float(line_sp[4+i][10:]))
            else:
              en_occ.append( float(line_sp[4+i]) )
        else:
          break 

      # read unoccupied  
      en_virt = []
      while (1):
        if tag_vir in line:
          line_sp= line.split()
          n = len(line_sp) - 4  # the number of energies on this line

          if debug: print line_sp

          for i in range(n):
            en_virt.append( float(line_sp[4+i]) )
        else:
          break
        line = ifile.readline()
      
      # get Egap and HOMO energy
      egap_all.append( [en_virt[0] - en_occ[-1], en_occ[-1] ] ) 

  ifile.close()
  return egap_all


def f_Write_Struct_gjf(name,mol,title=None):
  """
  This subroutine write molecular structure into name.gjf in the Gaussian input format
  """
  print "Write molecular struct into Gaussian input file format: "+name+".gjf"
  nat = len(mol)
  ofile = open(name+".gjf",'w')
  ofile.write("%%chk=%s\n\n"%(name))
  ofile.write("#p B3LYP/6-31G* \n\n")

  if title is None:  title = "Gaussian input file generated by f_Write_Struct_gjf" 
  ofile.write("%s\n\n"%(title))

  ofile.write("0  1\n")
  for iat in range(nat):
    atom = mol[iat][0]
    xyz = mol[iat][1][:]
    ofile.write("%-6s %12.6f %12.6f %12.6f\n"%(atom,xyz[0],xyz[1],xyz[2]))
  ofile.close()

def f_Gau_read_struct_gjf(name):
  """
  This subroutine reads the molecular structure from the gjf file
  """
  ifile = open(name+".gjf",'r') 
  mol = []
  head = False 
  isec = 0 
  while (1) :
    line = ifile.readline().strip()
    if line == '': line = ' '
    if line[0] == '!':  # comments lines
      continue   
    if line[0] == '%':  # link0 section
      continue 
    if line[0] == '#':  # route section 
      isec=1
      continue 
    if isec == 1 and line[0] != ' ': # additional route section line 
      continue 
      
    if isec == 1 and line[0] == ' ' : # the end of the route section  
      isec = 2 
      continue 

    if isec == 2 and line[0] != ' ': # title lines
      continue 

    if isec == 2 and line[0] ==' ': # end of the title section 
      isec = 3 
      continue 
    if isec == 3 and line[0] != 0 : # the charge and multiplicity line 
      isec = 4 
      continue   

    if isec == 4 and line[0] != ' ':
      data = line.split()
      n = len(data) 
      if n < 4: 
        print "ERROR: unsupported molecular specification: ", line  
        sys.exit(1)
      
      atom = data[0]
      x = float(data[n-3])
      y = float(data[n-2])
      z = float(data[n-1]) 
      mol.append([atom,[x,y,z]])
      continue 
    if isec == 4 and line[0] == ' ':  # end of molecular specification section 
      break 

  ifile.close()
  return mol

def f_Gau_Read_Struct(name,n=-1,debug=False):
  """
  This subroutine reads the structure from the output of the g09 standard output. 
  In default, only the last optimized structure is read. 
  """
  # first get the total number of structures available in the output file
  starting_tag1 = "Input orientation:"
  starting_tag2 = "Standard orientation:"
  optimized_tag = "Optimization completed"

  ifile = open(name, 'r') 
  struct_all = []
  n_struct = 0 

  lreach_optimized = False
  while (1): 
    line = ifile.readline() 
    if not line: break       # reach the end of file 

    if optimized_tag in line: 
      lreach_optimized = True

    if ( starting_tag1 in line or starting_tag2 in line ) and lreach_optimized : # start to read the structure 
      f_Skip_Lines(ifile,4) 
      mol=[]
      while (1): 
        line = ifile.readline() 
        if "---" in line: break 
        data = line.split()
        atom = f_Element_Z_to_Symbol( int(data[1]) )
        x = float(data[3])
        y = float(data[4]) 
        z = float(data[5]) 
        mol.append([atom,[x,y,z]])

      lreach_optimized = False 
      struct_all.append(mol)
      n_struct += 1
   
  if n_struct== 0 :      
    print "ERROR: No structure is found in " +name
    sys.exit(1) 
  
  if debug:
    print n_struct," optimized structures are found"
  
  if n==0: 
    return struct_all
  else:
    return struct_all[n]

