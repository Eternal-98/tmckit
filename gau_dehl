#!/usr/bin/env python
import sys,os
from io_utils import *
from struct_utils import *
from gau_utils    import *
from constants import *

def f_Help_Info():
  myname = sys.argv[0]
  print "\n"+myname + ": Calculate high-spin low-spin splitting for given input geometry\n"
  print "   Usage: " + os.path.basename(myname) + " [options]"\
  + """
  Options:  
    --debug           # set debug mode
    -h                # display this help information 
    -b   <basis>      # can be standard basis name or a text file containing the defition of the basis 
    -c  <charge>      # additional charge of the system
    -f  <file >       # the prefix name for files generated by this script   
    -i  <inp>         # the initial structure file with the format indicated by its suffix==(xyz/gjf/mol) 
    -ls <lsmult>      # the multiplicity of low-spin state 
    -hs <hsmult>      # the multiplicity of high-spin state 
    -m  <method>      # which method used for the calculations 
    -np <nproc>       # set the directive for parallelization 
    -o  <opt >        # additional option for optimization 
    -ps               # with pseudo-potential 
    -t <task>         # which task 
                      #  0 -- calculate HS-LS splitting using a fixed structure
                      #  1 -- 
"""
  sys.exit(0)

def f_summarize(g09_out):
  print "\n---------------- Summary ----------------\n"
  etot = f_Gau_read_energy(g09_out)
  if len(etot) < 2:
    print "ERROR: incomplete results are found in the output"+g09_out
    sys.exit(1)

  ofile = open(g09_out,'a') 
  
  E0ls   = etot[-2]
  E0hs   = etot[-1]
  dehl = (E0hs - E0ls)*Ry2eV*2

  print "E0_LS=%12.6f Ha, E0_HS=%12.6f Ha, and DE_HL= %8.3f eV\n"%(E0ls, E0hs, dehl)
  ofile.write("\n\n*** Summary of gau_vde calculation ***\n")
  ofile.write("E0_LS=%12.6f Ha, E0_HS=%12.6f Ha, and DE_HL= %8.3f eV\n"%(E0ls, E0hs, dehl))
  ofile.close() 

def_method = "B3LYP"
def_task = 1 
def_file = ''
def_charge=0
def_debug = True
def_opt = " "
def_nproc = 4
def_inp = ''
def_basis = '6-31G*'
def_pseudo =  False
def_lsmult = 1
def_hsmult = 3 

def_po_method = 'none'

if f_Getopt('-h',0,False): f_Help_Info()

sum_out= f_Getopt('-s',1,None) 
if sum_out:
  f_summarize(sum_out) 
  sys.exit(0)

debug    = f_Getopt('--debug', 0, def_debug) 
basis    = f_Getopt('-b'     , 1, def_basis) 
charge   = f_Getopt('-c'     , 1, def_charge)
file     = f_Getopt('-f'     , 1, def_file)
inp      = f_Getopt('-i'     , 1, def_inp) 
hsmult   = f_Getopt('-hs'    , 1, def_hsmult) 
lsmult   = f_Getopt('-ls'    , 1, def_lsmult)
method   = f_Getopt('-m'     , 1, def_method) 
nproc    = f_Getopt('-np'    , 1, def_nproc) 
opt      = f_Getopt('-o'     , 1, def_opt) 
pseudo   = f_Getopt('-ps'    , 0, def_pseudo) 
task     = f_Getopt('-t'     , 1, def_task) 

if pseudo:
  ps_flag = ' Pseudo=Read '
else:
  ps_flag = ''

# some security check with the input 

# get the initial structure
inp_sfix = os.path.splitext(inp)[-1][1:]
inp_pfix = os.path.splitext(inp)[0]
if file == '': file = inp_pfix 

g09_inp = file+".gjf"
g09_out = file+".log" 
g09_err = file+".err" 
g09_chk = file+".chk"

print "\n*** Job Information ***"
print " init. struct from: " + inp 
print " options:           " + opt
print " method/basis :     " + method + "/"+basis
print " input file:        " + g09_inp
print " output file:       " + g09_out 
print " checkpoint file:   " + g09_chk 

# check basis 
basis_file=None 
if os.path.isfile(basis): 
  basis_file = basis 
  basis = 'gen'

# prepare the input files 

# get the initial structure 
print "\n*** Obtain initial structure ***" 
if inp_sfix == 'gjf': 
  mol = f_Gau_read_struct_gjf(inp_pfix)
elif inp_sfix == 'xyz':
  mol = f_Read_Struct_xyz(inp_pfix,debug=debug)
elif inp_sfix == 'mol':
  mol = f_Read_Struct_mol(inp_pfix,debug=debug)
elif inp_sfix == 'log' or inp_sfix == 'out':
    mol = f_Gau_Read_Struct(inp, debug=debug)
else:
  print "error: unsupported format in the input file " + inp 
  sys.exit(1)


print "\n*** Create the input file ***"
ofile = open(g09_inp,'w') 

ofile.write("%chk="+g09_chk+"\n")
if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))

if task == 0: 
  ofile.write("#p " + method + '/'+basis + opt + ps_flag + " test \n\n")
elif task == 1: 
  ofile.write("#p " + method + '/'+basis + " OPT" + opt + " Freq " + ps_flag + " test \n\n")

ofile.write("Low spin state\n\n")
ofile.write("%5d %5d\n"%(charge,lsmult))
for ia in range(len(mol)):
  atom = mol[ia][0]
  xyz = mol[ia][1]
  ofile.write("%-6s %12.6f %12.6f %12.6f\n"%(atom,xyz[0],xyz[1],xyz[2]))

ofile.write("\n") 
if basis_file:  ofile.write("@"+basis_file+"\n")

ofile.write("\n--Link1--\n")
ofile.write("%chk="+g09_chk+"\n")
if nproc > 0 : ofile.write('%nprocshared='+"%d\n"%(nproc))

if task == 0:
  ofile.write("#p " + method + '/'+basis + opt + ps_flag + " test \n\n")
elif task == 1:
  ofile.write("#p " + method + '/'+basis + " OPT" + opt + ps_flag + " test \n\n")

ofile.write("High-spin state \n\n")
ofile.write("%5d %5d\n"%(charge,hsmult))
for ia in range(len(mol)):
  atom = mol[ia][0]
  xyz = mol[ia][1]
  ofile.write("%-6s %12.6f %12.6f %12.6f\n"%(atom,xyz[0],xyz[1],xyz[2]))

ofile.write("\n") 
if basis_file:  ofile.write("@"+basis_file+"\n")

ofile.close()

# run the gaussian job 
print "\n*** Run the calculation ***"
f_Gau_run_g09(g09_inp,g09_out,g09_err)

# summarize the output 
print "\n*** Summarize the results ***"
f_summarize(g09_out) 

